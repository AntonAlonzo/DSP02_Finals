% Audio-in-audio watermark embedding program
% ALONZO & SOLIS | CEDISP2 S11 | Group 3

clear; clc;

%% ========== EMBEDDING PROCESS ==========

% Obtain audio data

[Cover,Fs] = audioread('cover.wav');
[Watermark,~] = audioread('watermark.wav');

% Match the length of watermark with cover by padding zeros

len_Cover = length(Cover);
len_WM = length(Watermark);
pad = zeros(len_Cover-len_WM, 1);
Watermark = [Watermark; pad];

% Perform single-level DWT with db3 wavelet

[Cover_A,Cover_D] = dwt(Cover,'db3');
[WM_A, WM_D] = dwt(Watermark, 'db3');

% Reshape detail coeffs to be square matrices

dim = round(sqrt(length(Cover_D)));
Cover_D = Cover_D(1:dim^2);
Cover_A = Cover_A(1:dim^2);

Cover_Dsq = reshape(Cover_D,dim,dim);

dim = round(sqrt(length(WM_D)));
WM_D = WM_D(1:dim^2);
WM_A = WM_A(1:dim^2);

WM_Dsq = reshape(WM_D,dim,dim);

% Perform SVD on the respective coeffs of the two audio data

[U_CD, S_CD, V_CD] = svd (Cover_Dsq);
[U_WD, S_WD, V_WD] = svd (WM_Dsq);

% Embedding watermark to cover via singular values

S_Watermarked = S_CD + (0.01*S_WD);

WatermarkedCover_D = U_CD * S_Watermarked * V_CD';

WatermarkedCover_D = reshape (WatermarkedCover_D,dim^2,1);

% IDWT to produce final watermarked audio

WatermarkedCover_D = idwt (Cover_A, WatermarkedCover_D,'db3');
audiowrite('watermarked.wav', WatermarkedCover_D, Fs);

%% ========== EXTRACTING PROCESS ==========

% Obtain watermarked audio data
[WatermarkedAudio, Fs] = audioread('watermarked.wav');

% Perform single-level DWT with db3 wavelet

[WMA_A,WMA_D] = dwt(WatermarkedAudio, 'db3');

% Reshape detail coeffs to be square matrices

dim = round(sqrt(length(WMA_D)));
WMA_A = WMA_A(1:dim^2);
WMA_D = WMA_D(1:dim^2);

WMA_Dsq = reshape(WMA_D,dim,dim);

% Perform SVD on the coeffs

[U_WMAD,S_WMAD,V_WMAD] = svd (WMA_Dsq);

% Extract and reshape

S_Extract = (S_WMAD - S_CD)/0.01;

Extract = U_WD * S_Extract * V_WD'; 

Extract = reshape (Extract,dim^2,1);

% IDWT to produce extracted watermark file

Extract =  idwt (WM_A, Extract, 'db3');
audiowrite('extracted.wav', Extract(1:len_WM), Fs);

%% ========== ATTACKING PROCESS ==========

[WatermarkedCover, Fs] = audioread('reverb.wav');

% Reverb
reverb = reverberator;
revAttack = reverb(WatermarkedCover);
audiowrite('reverb.wav', revAttack, Fs);

% Gaussian white noise
gaussianAttack = awgn(WatermarkedCover,10);
audiowrite('gaussian.wav', gaussianAttack, Fs);

% Random noise
noise = randn(1,len_Cover)/(len_Cover/20); % signal's amplitude too large
randAttack = filter(WatermarkedCover,1,noise);
audiowrite('random.wav', randAttack, Fs);

% Highpass filter
highAttack = highpass(WatermarkedCover,50,fs);
audiowrite('highpass.wav', highAttack, Fs);

%lowpass filter
lowAttack = lowpass(WatermarkedCover,15,fs);
audiowrite('lowpass.wav', lowAttack, Fs);

%% ========== EXTRACTING FROM ATTACKS ==========

% Obtain watermarked audio data
[revAttack, Fs] = audioread('reverb.wav');
[gaussianAttack, ~] = audioread('gaussian.wav');
[randAttack, ~] = audioread('random.wav');
[highAttack, ~] = audioread('highpass.wav');
[lowAttack, ~] = audioread('lowpass.wav');

% Perform single-level DWT with db3 wavelet
[reverb_A,reverb_D] = dwt(revAttack, 'db3');
[gaussian_A,gaussian_D] = dwt(gaussianAttack, 'db3');
[random_A,random_D] = dwt(randAttack, 'db3');
[highpass_A,highpass_D] = dwt(highAttack, 'db3');
[lowpass_A,lowpass_D] = dwt(lowAttack, 'db3');

% Reshape detail coeffs to be square matrices
dim = round(sqrt(length(reverb_D)));
reverb_A = reverb_A(1:dim^2);
reverb_D = reverb_D(1:dim^2);
reverb_Dsq = reshape(reverb_D,dim,dim);

dim = round(sqrt(length(gaussian_D)));
gaussian_A = gaussian_A(1:dim^2);
gaussian_D = gaussian_D(1:dim^2);
gaussian_Dsq = reshape(gaussian_D,dim,dim);

dim = round(sqrt(length(random_D)));
random_A = random_A(1:dim^2);
random_D = random_D(1:dim^2);
random_Dsq = reshape(random_D,dim,dim);

dim = round(sqrt(length(highpass_D)));
highpass_A = highpass_A(1:dim^2);
highpass_D = highpass_D(1:dim^2);
highpass_Dsq = reshape(highpass_D,dim,dim);

dim = round(sqrt(length(lowpass_D)));
lowpass_A = lowpass_A(1:dim^2);
lowpass_D = lowpass_D(1:dim^2);
lowpass_Dsq = reshape(lowpass_D,dim,dim);

% Perform SVD on the coeffs
[U_reverb,S_reverb,V_reverb] = svd (reverb_Dsq);
[U_gaussian,S_gaussian,V_gaussian] = svd (gaussian_Dsq);
[U_random,S_random,V_random] = svd (random_Dsq);
[U_highpass,S_highpass,V_highpass] = svd (highpass_Dsq);
[U_lowpass,S_lowpass,V_lowpass] = svd (lowpass_Dsq);

% Extract and reshape
S_Extract = (S_reverb - S_CD)/0.01;
reverb_Extract = U_WD * S_Extract * V_WD'; 
reverb_Extract = reshape (reverb_Extract,dim^2,1);

S_Extract = (S_gaussian - S_CD)/0.01;
gaussian_Extract = U_WD * S_Extract * V_WD'; 
gaussian_Extract = reshape (gaussian_Extract,dim^2,1);

S_Extract = (S_random - S_CD)/0.01;
random_Extract = U_WD * S_Extract * V_WD'; 
random_Extract = reshape (random_Extract,dim^2,1);

S_Extract = (S_highpass - S_CD)/0.01;
highpass_Extract = U_WD * S_Extract * V_WD'; 
highpass_Extract = reshape (highpass_Extract,dim^2,1);

S_Extract = (S_lowpass - S_CD)/0.01;
lowpass_Extract = U_WD * S_Extract * V_WD'; 
lowpass_Extract = reshape (lowpass_Extract,dim^2,1);

% IDWT to produce extracted watermark file
reverb_Extract =  idwt (WM_A, reverb_Extract, 'db3');
audiowrite('extractedReverb.wav', reverb_Extract(1:len_WM), Fs);

gaussian_Extract =  idwt (WM_A, gaussian_Extract, 'db3');
audiowrite('extractedGaussian.wav', gaussian_Extract(1:len_WM), Fs);

random_Extract =  idwt (WM_A, random_Extract, 'db3');
audiowrite('extractedRandom.wav', random_Extract(1:len_WM), Fs);

highpass_Extract =  idwt (WM_A, highpass_Extract, 'db3');
audiowrite('extractedHighpass.wav', highpass_Extract(1:len_WM), Fs);

lowpass_Extract =  idwt (WM_A, lowpass_Extract, 'db3');
audiowrite('extractedLowpass.wav', lowpass_Extract(1:len_WM), Fs);

%% ========== PLOTTING ==========

figure
subplot(4,1,1), 
plot(1:len_Cover, Cover),
title('cover signal');

subplot(4,1,2), 
plot(1:len_WM, Watermark),
title('watermark signal');

subplot(4,1,3), 
plot(1:len_Cover, WatermarkedCover_D),
title('/s/ magnitude spectrum');

subplot(4,1,4), 
plot(1:len_WM, Extract),
title('extracted watermark');


figure
subplot(6,1,1), 
plot(1:len_Cover, Cover),
title('cover signal');

subplot(6,1,2), 
plot(1:len_Cover, revAttack),
title('reverb attack');

subplot(6,1,3), 
plot(1:len_Cover, gaussianAttack),
title('gaussian white noise attack');

subplot(6,1,4), 
plot(1:len_Cover, randAttack),
title('random noise attack');

subplot(6,1,5), 
plot(1:len_Cover, highAttack),
title('highpass filter attack');

subplot(6,1,6), 
plot(1:len_Cover, lowAttack),
title('lowpass attack attack');


figure
subplot(6,1,1), 
plot(1:len_WM, Watermark),
title('watermark signal');

subplot(6,1,2), 
plot(1:len_WM, reverb_Extract),
title('watermark from reverb attack');

subplot(6,1,3), 
plot(1:len_WM, gaussian_Extract),
title('watermark from gaussian white noise attack');

subplot(6,1,4), 
plot(1:len_WM, random_Extract),
title('watermark from random noise attack');

subplot(6,1,5), 
plot(1:len_WM, highpass_Extract),
title('watermark from highpass filter attack');

subplot(6,1,6), 
plot(1:len_WM, lowpass_Extract),
title('watermark from lowpass attack attack');